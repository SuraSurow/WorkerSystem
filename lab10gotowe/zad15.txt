import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class PrintQueue
{
        private final Queue<String> kolejka ;
        private Lock lock;
        private Condition condition;
        private boolean valueSet;

        PrintQueue()
        {
               kolejka = new LinkedList<>();
               valueSet = false;
               lock  = new ReentrantLock();
               condition = lock.newCondition();
        }

        public void input ( String s)
        {
            lock.lock();
            try{
                while(valueSet)
                {
                    try
                    {
                        condition.await();
                    }
                    catch (InterruptedException e)
                    {
                        Thread.currentThread().interrupt();
                        return;
                    }
                }

                kolejka.add(s);
                System.out.println("Input "+s);
                valueSet=true;
                condition.signal();
            }
            finally
            {
                lock.unlock();
            }
        }

        public String get() {
            lock.lock();
            try {
                while (!valueSet) {
                    try {
                        condition.wait();
                    }
                    catch (InterruptedException e)
                    {
                        Thread.currentThread().interrupt();
                        return null;
                    }
                }
                String output = kolejka.poll();
                System.out.println("Pobrano z kolejki " + output);
                valueSet=false;
                condition.signal();
                return output;
            }
            finally {
                lock.unlock();
            }
        }

        class Consumer implements Runnable
        {
            private PrintQueue printQueue;

            Consumer(PrintQueue printQueue)
            {
                this.printQueue=printQueue;
            }


            @Override
            public void run() {
                for ( int i = 0 ; i < 5 ;i ++)
                {
                    try {
                        Thread.sleep(2000);
                        System.out.println("Consumer Job " +printQueue.get());
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                }
            }
        }
    class Producer implements Runnable {
        private final PrintQueue printQueue;

        public Producer(PrintQueue printQueue) {
            this.printQueue = printQueue;
        }

        @Override
        public void run() {
            for (int i = 0; i < 5; i++) {
                try {
                    Thread.sleep(1000);
                    printQueue.input("Producer Job " + i);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }





    }


    public static void main(String[] args) {
        PrintQueue printQueue = new PrintQueue();

        Thread producerThread = new Thread(printQueue.new Producer(printQueue));
        Thread consumerThread = new Thread(printQueue.new Consumer(printQueue));

        producerThread.start();
        consumerThread.start();
    }


}